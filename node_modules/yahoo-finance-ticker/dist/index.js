"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YahooFinanceTicker = void 0;
const websocket_1 = __importDefault(require("websocket"));
const protobufjs_1 = __importDefault(require("protobufjs"));
const events_1 = __importDefault(require("events"));
const path_1 = __importDefault(require("path"));
class YahooFinanceTicker {
    constructor() {
        this.eventEmitter = new events_1.default.EventEmitter();
        this.logging = false;
        this.initClient = () => {
            return new Promise((resolve) => {
                this.client = new websocket_1.default.client();
                this.client.connect("wss://streamer.finance.yahoo.com/");
                this.client.on("connect", (connection) => {
                    this.logger("Yahoo Finance WS Connected");
                    this.connection = connection;
                    resolve(true);
                    connection.on("message", this.handleConnectionMessage);
                });
                this.client.on("connectFailed", function (error) {
                    this.logger("Connect Error: " + error.toString());
                });
            });
        };
        this.handleConnectionMessage = (message) => {
            this.logger("Stream Message Received");
            if (message.type === "utf8") {
                const ticker = this.protoTicker.decode(Buffer.from(message.utf8Data, "base64"));
                this.eventEmitter.emit("ticker", ticker);
                if (!!this.callbackFn) {
                    this.callbackFn(ticker);
                }
            }
        };
        this.logger = (...args) => {
            if (this.logging) {
                console.log(...args);
            }
        };
        this.loadProto = () => __awaiter(this, void 0, void 0, function* () {
            const root = yield protobufjs_1.default.load(path_1.default.join(__dirname, "../", "yticker.proto"));
            this.protoTicker = root.lookupType("yticker");
        });
        this.subscribe = (symbols, callback) => __awaiter(this, void 0, void 0, function* () {
            if (!this.protoTicker) {
                yield this.loadProto();
            }
            if (!this.client || !this.connection) {
                yield this.initClient();
            }
            this.connection.sendUTF(JSON.stringify({
                subscribe: symbols,
            }));
            if (!!callback) {
                this.callbackFn = callback;
            }
            return this.eventEmitter;
        });
        this.setLogging = (bool) => {
            this.logging = bool;
        };
    }
}
exports.YahooFinanceTicker = YahooFinanceTicker;
exports.default = YahooFinanceTicker;
//# sourceMappingURL=index.js.map